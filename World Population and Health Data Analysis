{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/faizalrosyid/world-population-code-dataset?scriptVersionId=218892415\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","id":"89a294df","metadata":{"papermill":{"duration":0.003022,"end_time":"2025-01-23T09:31:18.297066","exception":false,"start_time":"2025-01-23T09:31:18.294044","status":"completed"},"tags":[]},"source":["# World Population and Health Data Analysis\n","## Step 1: Load the Datasets\n","The script begins by importing the required library, pandas, for data manipulation and analysis. Two datasets are loaded:\n","\n","* Population Data: Contains population statistics from 2014 to 2024 for various countries.\n","* Health Data: Contains health-related indicators for multiple countries over several years.\n","\n","The datasets are loaded using pd.read_csv() and inspected with .head() to ensure the data structure is correctly loaded."]},{"cell_type":"code","execution_count":1,"id":"0fc49c7a","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2025-01-23T09:31:18.303309Z","iopub.status.busy":"2025-01-23T09:31:18.303036Z","iopub.status.idle":"2025-01-23T09:31:19.077345Z","shell.execute_reply":"2025-01-23T09:31:19.076514Z"},"papermill":{"duration":0.778922,"end_time":"2025-01-23T09:31:19.078807","exception":false,"start_time":"2025-01-23T09:31:18.299885","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n","  has_large_values = (abs_vals > 1e6).any()\n","/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n","  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n","  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"]},{"data":{"text/plain":["(        Entity  Year  Population - Sex: all - Age: all - Variant: estimates\n"," 0  Afghanistan  1950                                            7776182    \n"," 1  Afghanistan  1951                                            7879343    \n"," 2  Afghanistan  1952                                            7987783    \n"," 3  Afghanistan  1953                                            8096703    \n"," 4  Afghanistan  1954                                            8207953    ,\n","                        country country_code  year  health_exp  life_expect  \\\n"," 0                        Aruba          ABW  1999         NaN    73.561000   \n"," 1  Africa Eastern and Southern          AFE  1999         NaN    51.258874   \n"," 2                  Afghanistan          AFG  1999         NaN    54.846000   \n"," 3   Africa Western and Central          AFW  1999         NaN    49.726429   \n"," 4                       Angola          AGO  1999         NaN    45.386000   \n"," \n","    maternal_mortality  infant_mortality  neonatal_mortality  \\\n"," 0                 NaN               NaN                 NaN   \n"," 1                 NaN         88.285642           38.433841   \n"," 2                 NaN         94.600000           64.000000   \n"," 3                 NaN        101.541373           44.733554   \n"," 4                 NaN        123.500000           51.000000   \n"," \n","    under_5_mortality  prev_hiv  inci_tuberc  prev_undernourishment  \n"," 0                NaN       NaN          NaN                    NaN  \n"," 1         142.506373  6.684793          NaN                    NaN  \n"," 2         135.800000  0.100000          NaN                    NaN  \n"," 3         173.943151       NaN          NaN                    NaN  \n"," 4         208.000000  1.300000          NaN                    NaN  )"]},"execution_count":1,"metadata":{},"output_type":"execute_result"}],"source":["import pandas as pd\n","\n","# Load the uploaded files\n","population_file_path = '/kaggle/input/population-1950-to-2023-v6/population new v2 .csv'\n","health_file_path = '/kaggle/input/world-health-indicators-dataset/world_health_data.csv'\n","\n","population_long = pd.read_csv(population_file_path)\n","health_data = pd.read_csv(health_file_path)\n","\n","# Display first few rows of both datasets for inspection\n","population_long.head(), health_data.head()"]},{"cell_type":"markdown","id":"4bbf974a","metadata":{"papermill":{"duration":0.002447,"end_time":"2025-01-23T09:31:19.084141","exception":false,"start_time":"2025-01-23T09:31:19.081694","status":"completed"},"tags":[]},"source":["## Step 2: Data Preparation for Joining\n","To ensure compatibility between the two datasets:\n","\n","* The Year column in the reshaped population dataset is converted to an integer.\n","* The health dataset is filtered to include only data from 2014 onwards, aligning it with the population dataset."]},{"cell_type":"code","execution_count":2,"id":"9b822491","metadata":{"execution":{"iopub.execute_input":"2025-01-23T09:31:19.090062Z","iopub.status.busy":"2025-01-23T09:31:19.089849Z","iopub.status.idle":"2025-01-23T09:31:19.096143Z","shell.execute_reply":"2025-01-23T09:31:19.095529Z"},"papermill":{"duration":0.010887,"end_time":"2025-01-23T09:31:19.09761","exception":false,"start_time":"2025-01-23T09:31:19.086723","status":"completed"},"tags":[]},"outputs":[],"source":["# Ensure 'Year' in population data is an integer\n","population_long['Year'] = population_long['Year'].astype(int)\n","\n","# Filter health data for years starting from 2014\n","health_data_filtered = health_data[health_data['year'] >= 1999]"]},{"cell_type":"markdown","id":"cc8d789a","metadata":{"papermill":{"duration":0.002425,"end_time":"2025-01-23T09:31:19.103231","exception":false,"start_time":"2025-01-23T09:31:19.100806","status":"completed"},"tags":[]},"source":["## Step 3: Merge the Datasets\n","The reshaped population dataset and filtered health dataset are merged on Country and Year. This ensures each row represents a country-year combination with its corresponding population and health indicators. The merge is performed using pd.merge() with an inner join to retain only matching records.\n","\n","After the merge, redundant columns (country and year) are dropped for a cleaner result."]},{"cell_type":"code","execution_count":3,"id":"4d6723dd","metadata":{"execution":{"iopub.execute_input":"2025-01-23T09:31:19.109192Z","iopub.status.busy":"2025-01-23T09:31:19.108964Z","iopub.status.idle":"2025-01-23T09:31:19.136905Z","shell.execute_reply":"2025-01-23T09:31:19.135928Z"},"papermill":{"duration":0.032274,"end_time":"2025-01-23T09:31:19.138174","exception":false,"start_time":"2025-01-23T09:31:19.1059","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["        Entity  Year  Population - Sex: all - Age: all - Variant: estimates  \\\n","0  Afghanistan  1999                                           19887791       \n","1  Afghanistan  2000                                           20130334       \n","2  Afghanistan  2001                                           20284303       \n","3  Afghanistan  2002                                           21378123       \n","4  Afghanistan  2003                                           22733054       \n","\n","  country_code  health_exp  life_expect  maternal_mortality  infant_mortality  \\\n","0          AFG         NaN       54.846                 NaN              94.6   \n","1          AFG         NaN       55.298              1346.0              92.0   \n","2          AFG         NaN       55.798              1273.0              89.3   \n","3          AFG    9.443391       56.454              1277.0              86.6   \n","4          AFG    8.941258       57.344              1196.0              83.7   \n","\n","   neonatal_mortality  under_5_mortality  prev_hiv  inci_tuberc  \\\n","0                64.0              135.8       0.1          NaN   \n","1                62.7              131.6       0.1        190.0   \n","2                61.5              127.4       0.1        189.0   \n","3                60.2              123.0       0.1        189.0   \n","4                58.9              118.5       0.1        189.0   \n","\n","   prev_undernourishment  \n","0                    NaN  \n","1                    NaN  \n","2                   46.0  \n","3                   43.7  \n","4                   38.6  \n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n","  has_large_values = (abs_vals > 1e6).any()\n","/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n","  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n","  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"]}],"source":["# Perform the join using the country name and year\n","joined_data = pd.merge(\n","    population_long,\n","    health_data_filtered,\n","    how='inner',\n","    left_on=['Entity', 'Year'],\n","    right_on=['country', 'year']\n",")\n","\n","# Drop unnecessary columns after the join\n","joined_data = joined_data.drop(columns=['country', 'year'])\n","\n","# Display the result\n","print(joined_data.head())"]},{"cell_type":"code","execution_count":4,"id":"7c15dc26","metadata":{"execution":{"iopub.execute_input":"2025-01-23T09:31:19.144419Z","iopub.status.busy":"2025-01-23T09:31:19.14422Z","iopub.status.idle":"2025-01-23T09:31:19.152694Z","shell.execute_reply":"2025-01-23T09:31:19.151834Z"},"papermill":{"duration":0.01299,"end_time":"2025-01-23T09:31:19.153982","exception":false,"start_time":"2025-01-23T09:31:19.140992","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Count of duplicate Year values: 4700\n","Occurrences of each Year:\n","Year\n","1999    188\n","2000    188\n","2001    188\n","2002    188\n","2003    188\n","2004    188\n","2005    188\n","2006    188\n","2007    188\n","2008    188\n","2009    188\n","2010    188\n","2011    188\n","2012    188\n","2013    188\n","2014    188\n","2015    188\n","2016    188\n","2017    188\n","2018    188\n","2019    188\n","2020    188\n","2021    188\n","2022    188\n","2023    188\n","Name: count, dtype: int64\n"]}],"source":["# Count duplicate occurrences of the unique value 'Year'\n","year_duplicates_count = joined_data['Year'].duplicated(keep=False).sum()\n","\n","# Count the occurrences of each unique year for insights\n","year_occurrences = joined_data['Year'].value_counts()\n","\n","# Print the counts for inspection\n","print(\"Count of duplicate Year values:\", year_duplicates_count)\n","print(\"Occurrences of each Year:\")\n","print(year_occurrences)"]},{"cell_type":"code","execution_count":5,"id":"7f7c82f5","metadata":{"execution":{"iopub.execute_input":"2025-01-23T09:31:19.160492Z","iopub.status.busy":"2025-01-23T09:31:19.160294Z","iopub.status.idle":"2025-01-23T09:31:19.172315Z","shell.execute_reply":"2025-01-23T09:31:19.171489Z"},"papermill":{"duration":0.01677,"end_time":"2025-01-23T09:31:19.173583","exception":false,"start_time":"2025-01-23T09:31:19.156813","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 4700 entries, 0 to 4699\n","Data columns (total 13 columns):\n"," #   Column                                                 Non-Null Count  Dtype  \n","---  ------                                                 --------------  -----  \n"," 0   Entity                                                 4700 non-null   object \n"," 1   Year                                                   4700 non-null   int64  \n"," 2   Population - Sex: all - Age: all - Variant: estimates  4700 non-null   int64  \n"," 3   country_code                                           4700 non-null   object \n"," 4   health_exp                                             3661 non-null   float64\n"," 5   life_expect                                            4342 non-null   float64\n"," 6   maternal_mortality                                     3402 non-null   float64\n"," 7   infant_mortality                                       4128 non-null   float64\n"," 8   neonatal_mortality                                     4128 non-null   float64\n"," 9   under_5_mortality                                      4128 non-null   float64\n"," 10  prev_hiv                                               3160 non-null   float64\n"," 11  inci_tuberc                                            4351 non-null   float64\n"," 12  prev_undernourishment                                  3313 non-null   float64\n","dtypes: float64(9), int64(2), object(2)\n","memory usage: 477.5+ KB\n","None\n"]}],"source":["# Dataset Information\n","print(joined_data.info())"]},{"cell_type":"code","execution_count":6,"id":"34263398","metadata":{"execution":{"iopub.execute_input":"2025-01-23T09:31:19.180486Z","iopub.status.busy":"2025-01-23T09:31:19.180271Z","iopub.status.idle":"2025-01-23T09:31:19.200907Z","shell.execute_reply":"2025-01-23T09:31:19.200155Z"},"papermill":{"duration":0.025753,"end_time":"2025-01-23T09:31:19.202392","exception":false,"start_time":"2025-01-23T09:31:19.176639","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 4700 entries, 0 to 4699\n","Data columns (total 13 columns):\n"," #   Column                                                 Non-Null Count  Dtype  \n","---  ------                                                 --------------  -----  \n"," 0   Entity                                                 4700 non-null   object \n"," 1   Year                                                   4700 non-null   int64  \n"," 2   Population - Sex: all - Age: all - Variant: estimates  4700 non-null   int64  \n"," 3   country_code                                           4700 non-null   object \n"," 4   health_exp                                             4700 non-null   float64\n"," 5   life_expect                                            4700 non-null   float64\n"," 6   maternal_mortality                                     4700 non-null   float64\n"," 7   infant_mortality                                       4700 non-null   float64\n"," 8   neonatal_mortality                                     4700 non-null   float64\n"," 9   under_5_mortality                                      4700 non-null   float64\n"," 10  prev_hiv                                               4700 non-null   float64\n"," 11  inci_tuberc                                            4700 non-null   float64\n"," 12  prev_undernourishment                                  4700 non-null   float64\n","dtypes: float64(9), int64(2), object(2)\n","memory usage: 477.5+ KB\n","None\n","        Entity  Year  Population - Sex: all - Age: all - Variant: estimates  \\\n","0  Afghanistan  1999                                           19887791       \n","1  Afghanistan  2000                                           20130334       \n","2  Afghanistan  2001                                           20284303       \n","3  Afghanistan  2002                                           21378123       \n","4  Afghanistan  2003                                           22733054       \n","\n","  country_code  health_exp  life_expect  maternal_mortality  infant_mortality  \\\n","0          AFG    9.443391       54.846              1346.0              94.6   \n","1          AFG    9.443391       55.298              1346.0              92.0   \n","2          AFG    9.443391       55.798              1273.0              89.3   \n","3          AFG    9.443391       56.454              1277.0              86.6   \n","4          AFG    8.941258       57.344              1196.0              83.7   \n","\n","   neonatal_mortality  under_5_mortality  prev_hiv  inci_tuberc  \\\n","0                64.0              135.8       0.1        190.0   \n","1                62.7              131.6       0.1        190.0   \n","2                61.5              127.4       0.1        189.0   \n","3                60.2              123.0       0.1        189.0   \n","4                58.9              118.5       0.1        189.0   \n","\n","   prev_undernourishment  \n","0                   46.0  \n","1                   46.0  \n","2                   46.0  \n","3                   43.7  \n","4                   38.6  \n"]}],"source":["# Interpolation for filling missing values\n","columns_with_nan = [\n","    'health_exp', 'life_expect', 'maternal_mortality',\n","    'infant_mortality', 'neonatal_mortality', 'under_5_mortality',\n","    'prev_hiv', 'inci_tuberc', 'prev_undernourishment'\n","]\n","\n","# Create a copy of the dataset\n","joined_data_filled = joined_data.copy()\n","\n","# Apply interpolation to each column with NaN values\n","for column in columns_with_nan:\n","    joined_data_filled[column] = joined_data_filled[column].interpolate(method='linear', limit_direction='both')\n","\n","# Verify if NaN values are filled\n","print(joined_data_filled.info())\n","print(joined_data_filled.head())\n"]},{"cell_type":"code","execution_count":7,"id":"566d8102","metadata":{"execution":{"iopub.execute_input":"2025-01-23T09:31:19.209249Z","iopub.status.busy":"2025-01-23T09:31:19.209013Z","iopub.status.idle":"2025-01-23T09:31:19.232468Z","shell.execute_reply":"2025-01-23T09:31:19.231654Z"},"papermill":{"duration":0.028488,"end_time":"2025-01-23T09:31:19.233829","exception":false,"start_time":"2025-01-23T09:31:19.205341","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 4700 entries, 0 to 4699\n","Data columns (total 13 columns):\n"," #   Column                                                 Non-Null Count  Dtype  \n","---  ------                                                 --------------  -----  \n"," 0   Entity                                                 4700 non-null   object \n"," 1   Year                                                   4700 non-null   int64  \n"," 2   Population - Sex: all - Age: all - Variant: estimates  4700 non-null   int64  \n"," 3   country_code                                           4700 non-null   object \n"," 4   health_exp                                             4700 non-null   float64\n"," 5   life_expect                                            4700 non-null   float64\n"," 6   maternal_mortality                                     4700 non-null   float64\n"," 7   infant_mortality                                       4700 non-null   float64\n"," 8   neonatal_mortality                                     4700 non-null   float64\n"," 9   under_5_mortality                                      4700 non-null   float64\n"," 10  prev_hiv                                               4700 non-null   float64\n"," 11  inci_tuberc                                            4700 non-null   float64\n"," 12  prev_undernourishment                                  4700 non-null   float64\n","dtypes: float64(9), int64(2), object(2)\n","memory usage: 477.5+ KB\n","None\n","        Entity  Year  Population - Sex: all - Age: all - Variant: estimates  \\\n","0  Afghanistan  1999                                           19887791       \n","1  Afghanistan  2000                                           20130334       \n","2  Afghanistan  2001                                           20284303       \n","3  Afghanistan  2002                                           21378123       \n","4  Afghanistan  2003                                           22733054       \n","\n","  country_code  health_exp  life_expect  maternal_mortality  infant_mortality  \\\n","0          AFG    9.443391       54.846              1346.0              94.6   \n","1          AFG    9.443391       55.298              1346.0              92.0   \n","2          AFG    9.443391       55.798              1273.0              89.3   \n","3          AFG    9.443391       56.454              1277.0              86.6   \n","4          AFG    8.941258       57.344              1196.0              83.7   \n","\n","   neonatal_mortality  under_5_mortality  prev_hiv  inci_tuberc  \\\n","0                64.0              135.8       0.1        190.0   \n","1                62.7              131.6       0.1        190.0   \n","2                61.5              127.4       0.1        189.0   \n","3                60.2              123.0       0.1        189.0   \n","4                58.9              118.5       0.1        189.0   \n","\n","   prev_undernourishment  \n","0                   46.0  \n","1                   46.0  \n","2                   46.0  \n","3                   43.7  \n","4                   38.6  \n"]}],"source":["import numpy as np\n","\n","# Replace empty strings or blanks with NaN\n","joined_data.replace(\"\", np.nan, inplace=True)\n","\n","# Columns with possible missing values\n","columns_with_nan = [\n","    'health_exp', 'life_expect', 'maternal_mortality',\n","    'infant_mortality', 'neonatal_mortality', 'under_5_mortality',\n","    'prev_hiv', 'inci_tuberc', 'prev_undernourishment'\n","]\n","\n","# Apply interpolation to handle missing values\n","for column in columns_with_nan:\n","    joined_data[column] = joined_data[column].interpolate(method='linear', limit_direction='both')\n","\n","# Verify if blanks and NaN values are handled\n","print(joined_data.info())\n","print(joined_data.head())"]},{"cell_type":"markdown","id":"6ee3dd00","metadata":{"papermill":{"duration":0.003404,"end_time":"2025-01-23T09:31:19.241014","exception":false,"start_time":"2025-01-23T09:31:19.23761","status":"completed"},"tags":[]},"source":["## Step 4: Save the Merged Dataset\n","The final merged dataset, combining population and health indicators for each country and year, is saved to a CSV file named World_Population_and_Health.csv for future use."]},{"cell_type":"code","execution_count":8,"id":"f752805f","metadata":{"execution":{"iopub.execute_input":"2025-01-23T09:31:19.248543Z","iopub.status.busy":"2025-01-23T09:31:19.248342Z","iopub.status.idle":"2025-01-23T09:31:19.292011Z","shell.execute_reply":"2025-01-23T09:31:19.291347Z"},"papermill":{"duration":0.048834,"end_time":"2025-01-23T09:31:19.293326","exception":false,"start_time":"2025-01-23T09:31:19.244492","status":"completed"},"tags":[]},"outputs":[],"source":["joined_data.to_csv('World_Population_and_Health.csv', index=False)"]},{"cell_type":"markdown","id":"8713f5ec","metadata":{"papermill":{"duration":0.003071,"end_time":"2025-01-23T09:31:19.299717","exception":false,"start_time":"2025-01-23T09:31:19.296646","status":"completed"},"tags":[]},"source":["This script effectively processes and combines two datasets, providing a consolidated view of population and health data. It demonstrates best practices in data manipulation and preparation for deeper analysis or visualization."]}],"metadata":{"kaggle":{"accelerator":"gpu","dataSources":[{"datasetId":6144912,"sourceId":9985325,"sourceType":"datasetVersion"},{"datasetId":6351620,"sourceId":10266662,"sourceType":"datasetVersion"},{"datasetId":6512904,"sourceId":10523291,"sourceType":"datasetVersion"}],"dockerImageVersionId":30839,"isGpuEnabled":true,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"},"papermill":{"default_parameters":{},"duration":4.050277,"end_time":"2025-01-23T09:31:19.719403","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-01-23T09:31:15.669126","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}